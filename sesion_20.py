# -*- coding: utf-8 -*-
"""sesion 20.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16nT39LMlJju9dNSd9W8tETIfTGSv1sn1
"""

import pandas as pd
import matplotlib.pyplot as plt

# Carga de datos
data = pd.read_csv('data1.csv')

# Exploración
print(data.head())
print(data.describe())
print(data.info())

# Limpieza
data_cleaned = data.dropna()  # Eliminar filas con nulos
data_cleaned = data_cleaned.drop_duplicates()  # Eliminar duplicados

# Check if 'columna' exists in the DataFrame
if 'columna' in data_cleaned.columns:
    data_cleaned['columna'] = data_cleaned['columna'].astype(float)  # Cambio de tipos
else:
    print("Column 'columna' not found in the DataFrame.")
    # Handle the missing column (e.g., skip conversion, raise an error, etc.)

# Exportar datos limpios
data_cleaned.to_csv('data1_limpios.csv', index=False)

# Visualización
# Make sure you are referencing the correct column names here

# 1. Histograma de la columna_x
plt.figure(figsize=(8, 6))
# Use data_cleaned instead of df
plt.hist(data_cleaned['columna_x'], bins=5, color='skyblue', edgecolor='black')
plt.title('Distribución de columna_x', fontsize=15)
plt.xlabel('Valores de columna_x', fontsize=12)
plt.ylabel('Frecuencia', fontsize=12)
plt.show()

# 2. Gráfico de dispersión entre columna_x y columna_y
plt.figure(figsize=(8, 6))
# Use data_cleaned instead of df
plt.scatter(data_cleaned['columna_x'], data_cleaned['columna_y'], color='green', s=100, edgecolors='black', alpha=0.75)
plt.title('Relación entre columna_x y columna_y', fontsize=15)
plt.xlabel('columna_x', fontsize=12)
plt.ylabel('columna_y', fontsize=12)
plt.grid(True)
plt.show()

# 3. Gráfico de barras para la columna_categorica
plt.figure(figsize=(8, 6))
# Use data_cleaned instead of df
data_cleaned['columna_categorica'].value_counts().plot(kind='bar', color='orange', edgecolor='black')
plt.title('Frecuencia de columna_categorica', fontsize=15)
plt.xlabel('Categoría', fontsize=12)
plt.ylabel('Frecuencia', fontsize=12)
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Generar data ficticia de 5000 registros
np.random.seed(42)
data_size = 5000
data = {
    'Edad': np.random.randint(18, 90, size=data_size),
    'Genero': np.random.choice(['M', 'F'], size=data_size),
    'Colesterol': np.random.randint(150, 300, size=data_size),
    'Presion_Arterial': np.random.randint(80, 200, size=data_size),
    'Hipertension': np.random.choice(['Sí', 'No'], size=data_size, p=[0.4, 0.6])
}

# Convertir a DataFrame
df = pd.DataFrame(data)

# Guardar el DataFrame en un archivo CSV para su descarga antes de la limpieza
file_path_clean = 'datos salud..csv'
df.to_csv(file_path_clean, index=False)

# Mostrar las primeras filas
print("Datos sin limpieza:")
print(df.head())

# Exploración de datos
print("\nResumen estadístico:")
print(df.describe())

print("\nValores nulos por columna:")
print(df.isnull().sum())

# Limpieza de datos
# Supongamos que queremos eliminar los valores donde la presión arterial esté fuera del rango lógico (por ejemplo, mayor a 180 o menor a 90)
df_cleaned = df[(df['Presion_Arterial'] >= 90) & (df['Presion_Arterial'] <= 180)]

# Verificación después de limpieza
print("\nDatos limpios:")
print(df_cleaned.describe())

# Guardar los datos limpios en un archivo CSV
file_path_cleaned = 'datos_salud_limpios.csv'
df_cleaned.to_csv(file_path_cleaned, index=False)

# Visualización: Relación entre Edad y Colesterol
plt.figure(figsize=(10, 6))
plt.scatter(df_cleaned['Edad'], df_cleaned['Colesterol'], c='blue', alpha=0.5)
plt.title('Relación entre Edad y Colesterol')
plt.xlabel('Edad')
plt.ylabel('Colesterol')
plt.show()

# Visualización: Frecuencia de pacientes con Hipertensión
plt.figure(figsize=(8, 6))
df_cleaned['Hipertension'].value_counts().plot(kind='bar', color='green', edgecolor='black')
plt.title('Frecuencia de pacientes con Hipertensión')
plt.xlabel('Diagnóstico')
plt.ylabel('Frecuencia')
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Paso 1: Generar data ficticia de 2000 registros
np.random.seed(42)
data_size = 2000
data = {
    'Region': np.random.choice(['Norte', 'Sur', 'Este', 'Oeste'], size=data_size),
    'Profundidad_Pozo': np.random.randint(1000, 4000, size=data_size),  # En metros
    'Barriles_Diarios': np.random.randint(50, 2000, size=data_size),  # En barriles
    'Presion_Reservorio': np.random.randint(1000, 5000, size=data_size),  # En PSI
    'Temperatura_Reservorio': np.random.randint(50, 150, size=data_size)  # En grados Celsius
}

# Convertir a DataFrame
df = pd.DataFrame(data)

# Guardar el DataFrame en un archivo CSV para su descarga antes de la limpieza
file_path = 'datos_petroleo.csv'
df.to_csv(file_path, index=False)

# Paso 2: Exploración de los datos
print("Primeras filas del dataset:")
print(df.head())

print("\nResumen estadístico:")
print(df.describe())

print("\nVerificar valores nulos:")
print(df.isnull().sum())

# Paso 3: Limpieza de datos: eliminar registros con valores fuera de rangos lógicos
df_cleaned = df[(df['Profundidad_Pozo'] >= 1000) & (df['Profundidad_Pozo'] <= 3500)]
df_cleaned = df_cleaned[(df_cleaned['Presion_Reservorio'] >= 1500) & (df_cleaned['Presion_Reservorio'] <= 4500)]

# Paso 4: Guardar los datos limpios en un archivo CSV
file_path_cleaned = 'datos_petroleo_limpios.csv'
df_cleaned.to_csv(file_path_cleaned, index=False)

# Paso 5: Visualización

# 1. Gráfico de dispersión mejorado: Relación entre Profundidad del Pozo y Barriles Diarios
plt.figure(figsize=(10, 6))
plt.scatter(df_cleaned['Profundidad_Pozo'], df_cleaned['Barriles_Diarios'],
            color='dodgerblue', edgecolor='black', s=80, alpha=0.7)
plt.title('Relación entre Profundidad del Pozo y Barriles Diarios', fontsize=15, fontweight='bold')
plt.xlabel('Profundidad del Pozo (metros)', fontsize=12)
plt.ylabel('Barriles Diarios', fontsize=12)
plt.grid(True, linestyle='--', alpha=0.6)
plt.xticks(fontsize=10)
plt.yticks(fontsize=10)
plt.show()

# 2. Gráfico de barras mejorado: Frecuencia de pozos por Región
plt.figure(figsize=(8, 6))
df_cleaned['Region'].value_counts().plot(kind='bar', color=['#FFA07A', '#20B2AA', '#87CEFA', '#FF6347'], edgecolor='black')
plt.title('Frecuencia de Pozos por Región', fontsize=15, fontweight='bold')
plt.xlabel('Región', fontsize=12)
plt.ylabel('Número de Pozos', fontsize=12)
plt.xticks(rotation=0, fontsize=10)
plt.yticks(fontsize=10)
plt.show()

# Enlaces de descarga
file_path, file_path_cleaned

"""Laboratorio"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Cargar los datos desde el CSV generado
df_financiero = pd.read_csv('datos_financieros.csv')

# 1. Exploración de los datos
print("Resumen de los datos:")
print(df_financiero.describe())

print("\nVerificación de valores nulos:")
print(df_financiero.isnull().sum())

# 2. Limpieza de datos
# Rellenar los valores faltantes de 'Salario_Anual' y 'Deuda' con la mediana de cada columna
df_financiero['Salario_Anual'].fillna(df_financiero['Salario_Anual'].median(), inplace=True)
df_financiero['Deuda'].fillna(df_financiero['Deuda'].median(), inplace=True)

# Verificación de limpieza
print("\nVerificación de valores nulos después de la limpieza:")
print(df_financiero.isnull().sum())

# Exportar los datos limpios a un nuevo archivo CSV
df_financiero.to_csv('datos_financieros_limpios.csv', index=False)

# Guardar los datos limpios en un archivo CSV
df_financiero.to_csv('datos_financieros_limpios.csv', index=False)

# Enlace para descargar los datos limpios (para tu referencia):
print("Los datos limpios han sido guardados en 'datos_financieros_limpios.csv'")


# 3. Visualización personalizada
# Relación entre Edad y Deuda
plt.figure(figsize=(10, 6))
plt.scatter(df_financiero['Edad'], df_financiero['Deuda'], c='green', alpha=0.5)
plt.title('Relación entre Edad y Deuda', fontsize=15)
plt.xlabel('Edad', fontsize=12)
plt.ylabel('Deuda', fontsize=12)
plt.grid(True)

# Añadir una línea de tendencia
z = np.polyfit(df_financiero['Edad'], df_financiero['Deuda'], 1)
p = np.poly1d(z)
plt.plot(df_financiero['Edad'], p(df_financiero['Edad']), color='red', label='Tendencia')
plt.legend()

# Mostrar el gráfico
plt.show()

# gráfico de barras de la columna 'Historial_Crediticio'
plt.figure(figsize=(8, 6))
df_financiero['Historial_Crediticio'].value_counts().plot(kind='bar', color='skyblue', edgecolor='black')

# Personalización del gráfico
plt.title('Distribución del Historial Crediticio', fontsize=15)
plt.xlabel('Historial Crediticio', fontsize=12)
plt.ylabel('Cantidad de Clientes', fontsize=12)

# Mostrar el gráfico
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()



"""2 escenario

"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Cargar los datos desde el CSV generado
df_salud = pd.read_csv('datos_salud glu.csv')

# 1. Exploración de los datos
print("Resumen de los datos:")
print(df_salud.describe())

print("\nVerificación de valores nulos:")
print(df_salud.isnull().sum())

# 2. Limpieza de datos
# Rellenar los valores faltantes de 'Glucosa' y 'IMC' con la mediana de cada columna
df_salud['Glucosa'].fillna(df_salud['Glucosa'].median(), inplace=True)
df_salud['IMC'].fillna(df_salud['IMC'].median(), inplace=True)

# Verificación de limpieza
print("\nVerificación de valores nulos después de la limpieza:")
print(df_salud.isnull().sum())

# Exportar los datos limpios a un nuevo archivo CSV
df_salud.to_csv('datos_salud_limpios.csv', index=False)

# Guardar los datos limpios en un archivo CSV
df_salud.to_csv('datos_salud_limpios.csv', index=False)

# Enlace para descargar los datos limpios (para tu referencia):
print("Los datos limpios han sido guardados en 'datos_salud_limpios.csv'")

# 3. Visualización personalizada
# Relación entre Edad y Niveles de Glucosa
plt.figure(figsize=(10, 6))
plt.scatter(df_salud['Edad'], df_salud['Glucosa'], c='blue', alpha=0.5)
plt.title('Relación entre Edad y Niveles de Glucosa', fontsize=15)
plt.xlabel('Edad', fontsize=12)
plt.ylabel('Niveles de Glucosa', fontsize=12)
plt.grid(True)

# Añadir una línea de tendencia
z = np.polyfit(df_salud['Edad'], df_salud['Glucosa'], 1)
p = np.poly1d(z)
plt.plot(df_salud['Edad'], p(df_salud['Edad']), color='red', label='Tendencia')
plt.legend()

# Mostrar el gráfico
plt.show()

# Crear el gráfico de barras de la columna 'Antecedentes_Familiares'
plt.figure(figsize=(8, 6))
df_salud['Antecedentes_Familiares'].value_counts().plot(kind='bar', color='green', edgecolor='black')

# Personalización del gráfico
plt.title('Distribución de Antecedentes Familiares de Diabetes', fontsize=15)
plt.xlabel('Antecedentes Familiares', fontsize=12)
plt.ylabel('Cantidad de Pacientes', fontsize=12)

# Mostrar el gráfico
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Generar data ficticia de 5000 clientes
np.random.seed(42)
data_size = 5000 # Define data_size here
data = {
    'Edad': np.random.randint(18, 70, size=data_size),
    'Genero': np.random.choice(['M', 'F'], size=data_size),
    'Historial_Crediticio': np.random.choice(['Bueno', 'Regular', 'Malo'], size=data_size),
    'Salario_Anual': np.random.randint(20000, 120000, size=data_size),
    'Deuda': np.random.randint(0, 50000, size=data_size)
}

# Convertir a DataFrame
df = pd.DataFrame(data)

# Visualización 1: Relación entre Edad y Salario Anual
plt.figure(figsize=(10, 6))
plt.scatter(df['Edad'], df['Salario_Anual'], c='purple', alpha=0.5)
plt.title('Relación entre Edad y Salario Anual')
plt.xlabel('Edad')
plt.ylabel('Salario Anual')
plt.show()

# Visualización 2: Frecuencia de clientes por historial crediticio
plt.figure(figsize=(8, 6))
df['Historial_Crediticio'].value_counts().plot(kind='bar', color='blue', edgecolor='black')
plt.title('Frecuencia de clientes por historial crediticio')
plt.xlabel('Historial Crediticio')
plt.ylabel('Frecuencia')
plt.show()